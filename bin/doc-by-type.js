'use strict';

var yargs = require('yargs');
var TJS = require('typescript-json-schema');
var ejs = require('ejs');
var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');
var lodash = require('lodash');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var TJS__default = /*#__PURE__*/_interopDefaultLegacy(TJS);
var ejs__default = /*#__PURE__*/_interopDefaultLegacy(ejs);
var mkdirp__default = /*#__PURE__*/_interopDefaultLegacy(mkdirp);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/**
 * 将 {$ref: string} 这种引用类型转换为被引用的类型（非递归）
 * @param refTypeSpecObj 引用类型的对象
 * @param definitions 定义列表
 */
function findAndReplaceRefObj(refTypeSpecObj, definitions) {
    var _a;
    if (typeof refTypeSpecObj === "boolean") {
        return refTypeSpecObj;
    }
    const refPath = refTypeSpecObj.$ref;
    if (!refPath) {
        return refTypeSpecObj;
    }
    const refName = (_a = refPath.match(/^#\/definitions\/(.*)$/)) === null || _a === void 0 ? void 0 : _a[1];
    if (!refName) {
        return refTypeSpecObj;
    }
    const defObj = definitions[refName] || {};
    return defObj;
}
/**
 * 将 {$ref: string} 这种引用类型转换为被引用的类型（递归）
 * @param refTypeSpecObj 引用类型的对象
 * @param definitions 定义列表
 */
function tranverseAndReplaceRefObj(propTypeSpec, definitions) {
    if (typeof propTypeSpec === "boolean") {
        return propTypeSpec;
    }
    if (propTypeSpec.$ref) {
        const ObjWithNoRef = tranverseAndReplaceRefObj(findAndReplaceRefObj(propTypeSpec, definitions), definitions);
        return ObjWithNoRef;
    }
    if (propTypeSpec.anyOf) {
        const typeList = propTypeSpec.anyOf;
        return {
            anyOf: typeList.map((child) => tranverseAndReplaceRefObj(child, definitions)),
        };
    }
    if (propTypeSpec.type === "object") {
        const objectTypeProp = Object.assign({}, propTypeSpec.properties);
        const properties = propTypeSpec.properties;
        if (properties) {
            Object.keys(properties).forEach((iPropName) => {
                const replacedObjSpec = findAndReplaceRefObj(properties[iPropName], definitions);
                objectTypeProp[iPropName] = tranverseAndReplaceRefObj(replacedObjSpec, definitions);
            });
            return { type: "object", properties: objectTypeProp };
        }
        // 有可能缺失 properties 的情况（用户直接定义 type A = object）
        return { type: "object" };
    }
    if (propTypeSpec.type === "array") {
        const arrayItems = propTypeSpec.items;
        if (!arrayItems || typeof arrayItems === "boolean") {
            return propTypeSpec;
        }
        if (!Array.isArray(arrayItems)) {
            const itemType = findAndReplaceRefObj(arrayItems, definitions);
            return {
                type: "array",
                items: tranverseAndReplaceRefObj(itemType, definitions),
            };
        }
        else {
            return {
                type: "array",
                items: arrayItems.map((itemType) => tranverseAndReplaceRefObj(itemType, definitions)),
            };
        }
    }
    return propTypeSpec;
}
function normalize(defOrBool) {
    if (typeof defOrBool === "boolean") {
        return defOrBool;
    }
    const { properties, items, definitions, anyOf } = defOrBool;
    const defWithNoRef = defOrBool;
    if (!definitions) {
        return defWithNoRef;
    }
    // 处理 union
    if (anyOf) {
        defWithNoRef.anyOf = anyOf.map((unionItem) => normalize(unionItem));
    }
    // 处理 object
    if (properties) {
        const propsWithNoRef = {};
        Object.keys(properties).forEach((propKey) => {
            propsWithNoRef[propKey] = tranverseAndReplaceRefObj(properties[propKey], definitions);
        });
        defWithNoRef.properties = propsWithNoRef;
    }
    // 处理 array
    if (items !== undefined && items !== null) {
        if (typeof items === "boolean") {
            return defWithNoRef;
        }
        else if (Array.isArray(items)) {
            // TODO：支持元祖
            return defWithNoRef;
        }
        else if (items.properties) {
            const propsWithNoRef = {};
            const itemsprops = items.properties;
            Object.keys(itemsprops).forEach((propKey) => {
                propsWithNoRef[propKey] = tranverseAndReplaceRefObj(itemsprops[propKey], definitions);
            });
            items.properties = propsWithNoRef;
        }
    }
    return defWithNoRef;
}

function generateSchema(filePath, fileRoot, typeName) {
    const program = TJS__default['default'].getProgramFromFiles([filePath], {
        ignoreErrors: true,
    }, fileRoot);
    const schema = TJS__default['default'].generateSchema(program, typeName, {
        ignoreErrors: true,
    });
    if (!schema) {
        throw new Error("Cannot generate schema, find reason from previous error stack");
    }
    return schema;
}

const BOOL_TYPE = "unknown";
function getDocDataFromNormalized(schemaWithNoRef, typeName) {
    if (typeof schemaWithNoRef === "boolean") {
        return {
            type: BOOL_TYPE,
            name: "boolean",
            subTypes: [],
            example: "",
            desc: "",
        };
    }
    const { properties, items } = schemaWithNoRef;
    if (schemaWithNoRef.anyOf) {
        const subTypes = [];
        schemaWithNoRef.anyOf.forEach((unionType) => {
            if (typeof unionType === "boolean") {
                subTypes.push(BOOL_TYPE);
            }
            else if (unionType.type) {
                const newTypes = Array.isArray(unionType.type)
                    ? unionType.type
                    : [unionType.type];
                subTypes.splice(subTypes.length, 0, ...newTypes);
            }
        });
        return {
            type: "union",
            subTypes,
            name: typeName || "",
            example: "",
            desc: "",
            children: schemaWithNoRef.anyOf.map((unionType) => getDocDataFromNormalized(unionType, unionType.type)),
        };
    }
    if (properties) {
        return {
            type: "object",
            subTypes: [],
            name: typeName || "",
            example: "",
            desc: "",
            children: Object.keys(properties).map((propKey) => getDocDataFromNormalized(properties[propKey], propKey)),
        };
    }
    if (items !== undefined) {
        if (typeof items === "boolean") {
            return {
                type: "array",
                name: typeName || "",
                example: "",
                desc: "",
                children: [],
                subTypes: [],
            };
        }
        if (Array.isArray(items)) {
            // TODO 支持元组
            return {
                type: "array",
                name: typeName || "",
                example: "",
                desc: "",
                children: [],
                subTypes: [],
            };
        }
        const { properties } = items;
        if (!properties) {
            return {
                type: "array",
                name: typeName || "",
                example: "",
                desc: "",
                subTypes: [],
                children: [
                    {
                        type: items.type || "",
                        name: items.type || "",
                        example: "",
                        desc: "",
                        children: [],
                        subTypes: [],
                    },
                ],
            };
        }
        return {
            type: "array",
            name: typeName || "",
            example: "",
            desc: "",
            subTypes: [],
            children: Object.keys(properties).map((propKey) => getDocDataFromNormalized(properties[propKey], propKey)),
        };
    }
    return {
        type: schemaWithNoRef["type"] || "unknown",
        name: typeName || "",
        example: "",
        desc: "",
        subTypes: [],
        children: [],
    };
}

const renderByEjs = (data, templatePath, saveFilePath) => {
    const templateString = fs.readFileSync(templatePath, { encoding: "utf-8" });
    const renderedString = ejs__default['default'].render(templateString, data, {
        filename: templatePath,
    });
    const dirPath = path.dirname(saveFilePath);
    if (!fs.existsSync(dirPath)) {
        mkdirp__default['default'](dirPath).then(() => {
            fs.writeFileSync(saveFilePath, renderedString);
        });
    }
    else {
        fs.writeFileSync(saveFilePath, renderedString);
    }
};

function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const { path: filePath = "", root: fileRoot = "", typeName, menu } = yargs.option("path", {
            alias: "p",
            type: "string",
            demandOption: true,
        })
            .option("root", {
            alias: "r",
            type: "string",
        })
            .option("typeName", {
            alias: "t",
            type: "string",
            demandOption: true,
        })
            .option("menu", {
            alias: "m",
            type: "string",
        }).argv;
        const docPath = path.join(__dirname, '../docs', menu || '', `${typeName}.md`);
        const templatePath = path.join(__dirname, "../src/template/type-doc.ejs");
        const getTypeDocDataFromFile = lodash.flow([
            generateSchema,
            normalize,
            lodash.curryRight(getDocDataFromNormalized)(typeName || "MainType"),
            lodash.curryRight(renderByEjs)(templatePath, docPath),
        ]);
        getTypeDocDataFromFile(filePath, fileRoot, typeName);
    });
}
main();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

import { Config } from '../config/argv';
export declare type SetConfig = (config: Config) => Config | Promise<Config>;
export declare type onCreateBabelConfig = (params: any, dev: boolean) => void;
export declare type onCreateWebpackConfig<C = any> = (config: C, dev: boolean, args: Config) => C;
export declare type ModifyFiles = (files: string[], args: Config) => string[];
export declare type onCreateDevServer = <A>(app: A) => void;
export declare type OnPreBuild = (args: Config) => void;
export declare type OnPostBuild = (args: Config) => void;
export declare type OnPreRender = () => void;
export declare type OnPostRender = () => void;
export interface PluginFactory {
    setConfig?: SetConfig;
    onCreateBabelConfig?: onCreateBabelConfig;
    onCreateDevServer?: onCreateDevServer;
    onCreateWebpackConfig?: onCreateWebpackConfig;
    modifyFiles?: ModifyFiles;
    onPreBuild?: OnPreBuild;
    onPostBuild?: OnPostBuild;
}
export declare class Plugin<C = any> implements PluginFactory {
    static runPluginsMethod(plugins: Plugin[] | undefined): (method: keyof Plugin, ...args: any[]) => void;
    static propsOfPlugins(plugins: Plugin[]): (prop: keyof Plugin) => any[];
    static reduceFromPlugins<C>(plugins: Plugin[] | undefined): (method: keyof Plugin, initial: C, ...args: any[]) => C;
    static reduceFromPluginsAsync<C>(plugins: Plugin[] | undefined): (method: keyof Plugin, initial: C, ...args: any[]) => Promise<C>;
    readonly setConfig?: SetConfig;
    readonly onCreateWebpackConfig?: onCreateWebpackConfig<C>;
    readonly onCreateBabelConfig?: onCreateBabelConfig;
    readonly modifyFiles?: ModifyFiles;
    readonly onCreateDevServer?: onCreateDevServer;
    readonly onPreBuild?: OnPreBuild;
    readonly onPostBuild?: OnPostBuild;
    constructor(p: PluginFactory);
}
export declare function createPlugin<C = any>(factory: PluginFactory): Plugin<C>;

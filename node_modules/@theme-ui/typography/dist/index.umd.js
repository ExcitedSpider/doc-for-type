(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('compass-vertical-rhythm'), require('modularscale'), require('object-assign')) :
  typeof define === 'function' && define.amd ? define(['exports', 'compass-vertical-rhythm', 'modularscale', 'object-assign'], factory) :
  (factory((global.typography = {}),global.verticalRhythm,global.modularscale,global.assign));
}(this, (function (exports,verticalRhythm,ms,assign) {
  verticalRhythm = verticalRhythm && verticalRhythm.hasOwnProperty('default') ? verticalRhythm['default'] : verticalRhythm;
  ms = ms && ms.hasOwnProperty('default') ? ms['default'] : ms;
  assign = assign && assign.hasOwnProperty('default') ? assign['default'] : assign;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(source, true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(source).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  var heading = {
    fontFamily: 'heading',
    lineHeight: 'heading',
    fontWeight: 'heading'
  };
  var styles = {
    root: {
      fontFamily: 'body',
      fontSize: 2,
      fontWeight: 'body',
      lineHeight: 'body'
    },
    img: {
      maxWidth: '100%'
    },
    h1: assign({
      fontSize: 5
    }, heading),
    h2: assign({
      fontSize: 4
    }, heading),
    h3: assign({
      fontSize: 3
    }, heading),
    h4: assign({
      fontSize: 2
    }, heading),
    h5: assign({
      fontSize: 1
    }, heading),
    h6: assign({
      fontSize: 0
    }, heading),
    ul: {
      listStylePosition: 'outside',
      listStyleImage: 'none',
      ml: 3
    },
    ol: {
      listStylePosition: 'outside',
      listStyleImage: 'none',
      ml: 3
    },
    li: {
      mb: 2,
      pl: 0,
      ol: {
        my: 2,
        ml: 3
      },
      ul: {
        my: 2,
        ml: 3
      },
      p: {
        mb: 2
      }
    },
    p: {},
    table: {
      borderCollapse: 'collapse',
      width: '100%'
    },
    th: {
      textAlign: 'left',
      borderBottom: '1px solid',
      px: 2,
      py: 1,
      ':first-child': {
        pl: 0
      },
      ':last-child': {
        pr: 0
      }
    },
    td: {
      textAlign: 'left',
      borderBottom: '1px solid',
      px: 2,
      py: 1,
      mt: '-1px',
      ':first-child': {
        pl: 0
      },
      ':last-child': {
        pr: 0
      }
    },
    blockquote: {
      mx: 3
    },
    hr: {
      border: 0,
      borderBottom: '1px solid',
      mt: '-1px',
      mb: 3
    },
    b: {
      fontWeight: 'bold'
    },
    strong: {
      fontWeight: 'bold'
    },
    code: {
      fontSize: '85%'
    },
    pre: {
      fontSize: '85%',
      padding: 3
    }
  };
  var headings = ['h6', 'h5', 'h4', 'h3', 'h2', 'h1'];
  var blockElements = [].concat(headings, ['ul', 'ol', 'p', 'pre', 'table', 'blockquote', 'img', 'hr']);
  blockElements.forEach(function (tag) {
    assign(styles, _defineProperty({}, tag, assign({
      padding: 0,
      margin: 0,
      marginBottom: 3
    }, styles[tag])));
  });

  // - creates base theme object
  // - uses a static theme.styles object for consumption in theme-ui
  // - ignores overrideThemeStyles
  // - does not include color styles
  // - should be mostly compatible with existing typography.js themes

  var defaults = {
    baseFontSize: 16,
    baseLineHeight: 1.45,
    headerLineHeight: 1.1,
    scaleRatio: 2,
    googleFonts: [],
    headerFontFamily: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', 'sans-serif'],
    bodyFontFamily: ['georgia', 'serif'],
    headerWeight: 'bold',
    bodyWeight: 'normal',
    boldWeight: 'bold',
    includeNormalize: true,
    blockMarginBottom: 1
  };
  var toUnitless = function toUnitless(val) {
    return parseFloat(val);
  };
  var getScale = function getScale(opts) {
    return function (value) {
      return ms(value, opts.scaleRatio) * opts.baseFontSize;
    };
  };
  var getSpace = function getSpace(result, opts) {
    var n = toUnitless(result.rhythm(opts.blockMarginBottom));
    return [0, 1 / 4, 1 / 2, 1, 2, 4, 8].map(function (v) {
      return v * n;
    });
  }; // genericFontFamilies, wrapFontFamily adapted from typography.js
  // Wrap font names in quotes, unless the font name is actually a keyword.
  // See https://stackoverflow.com/a/13752149 and https://www.w3.org/TR/CSS2/fonts.html#font-family-prop

  var genericFontFamilies = ['inherit', 'default', 'serif', 'sans-serif', 'monospace', 'fantasy', 'cursive', '-apple-system', 'system-ui'];

  var wrapFontFamily = function wrapFontFamily(fontFamily) {
    return genericFontFamilies.includes(fontFamily) ? fontFamily : "'".concat(fontFamily, "'");
  };

  var stackFonts = function stackFonts(fonts) {
    return fonts.map(wrapFontFamily).join(', ');
  };

  var getFonts = function getFonts(result, opts) {
    var body = stackFonts(opts.bodyFontFamily);
    var heading = stackFonts(opts.headerFontFamily);
    return {
      body: body,
      heading: heading
    };
  };
  var getFontSizes = function getFontSizes(result, opts) {
    var scale = getScale(opts);
    return [-1.5 / 5, -1 / 5, 0, 2 / 5, 3 / 5, 1].map(scale);
  };
  var getLineHeights = function getLineHeights(result, opts) {
    var body = opts.baseLineHeight;
    var heading = opts.headerLineHeight;
    return {
      body: body,
      heading: heading
    };
  };
  var getFontWeights = function getFontWeights(result, opts) {
    var body = opts.bodyWeight;
    var bold = opts.boldWeight;
    var heading = opts.headerWeight;
    return {
      body: body,
      bold: bold,
      heading: heading
    };
  };
  var toTheme = function toTheme() {
    var _opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var opts = _objectSpread2({}, defaults, {}, _opts); // enforce unitless values


    opts.baseFontSize = toUnitless(opts.baseFontSize);
    opts.rhythmUnit = 'px';
    var typo = verticalRhythm(opts);
    var theme = {};
    typo.options = opts;
    theme.space = getSpace(typo, opts);
    theme.fonts = getFonts(typo, opts);
    theme.fontSizes = getFontSizes(typo, opts);
    theme.fontWeights = getFontWeights(typo, opts);
    theme.lineHeights = getLineHeights(typo, opts);
    return _objectSpread2({}, theme, {
      styles: styles,
      typography: typo
    });
  };

  exports.toTheme = toTheme;
  exports.styles = styles;

})));
//# sourceMappingURL=index.umd.js.map
